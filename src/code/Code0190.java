package code;

/**
 * @Author czgggggggg
 * @Date 2022/2/22
 * @Description
 */
public class Code0190 {
    public static void main(String[] args) {
        System.out.println(reverseBits(43261596));//964176192
        //00000010100101000001111010011100
        //00111001011110000010100101000000

        System.out.println(reverseBits(-3));//-1073741825
        // -3代表的是4294967293、-1073741825代表的是3221225471

        System.out.println(reverseBits(6));

    }
    //便于理解官方题解
    public static int reverseBits(int n) {
        int rev = 0;

        int a, b;
        for (int i = 0; i < 32; i++) {
            if(n == 0)
                break;

            a = n & 1;

            b = a << (31 - i);//

            rev = rev | b;

            n = n >>> 1;
        }

        return rev;
    }


//    //便于理解官方题解
//    public static int reverseBits(int n) {
//        int rev = 0;
//
//        int a, b;
//        for (int i = 0; i < 32; i++) {
//            if(n == 0)
//                break;
//
//            a = n & 1;
//            //a: 0->0->1->1->1->0->0->1->0->1->1->1->1->0->0->0->0->0->1->0->1->0->0->1->0->1
//
//            //i: 0->1->2->3->4->5->6->7->8->9->10->11->12->13->14->15->16->17->18->19->20->21->22->23->24->25
//            //(31-i): 31->30->29->28->27->26->25->24->23->22->21->20->19->18->17->16->15->14->13->12->11->10->9->8->7->6
//
//            b = a << (31 - i);//
//            //b: 0->0->536870912->268435456->134217728->0->0->16777216->0->4194304->2097152->1048576->524288->0->0->0->0->0->8192->0->2048->0->0->256->0->64
//
//            //rev: 0->0->0->536870912->805306368->939524096->939524096->939524096->956301312->956301312->960495616->962592768->963641344->964165632->964165632->964165632->964165632->964165632->964165632->964173824->964173824->964175872->964175872->964175872->964176128->964176128
//            rev = rev | b;
//            //rev: 0->0->536870912->805306368->939524096->939524096->939524096->956301312->956301312->960495616->962592768->963641344->964165632->964165632->964165632->964165632->964165632->964165632->964173824->964173824->964175872->964175872->964175872->964176128->964176128->964176192
//
//            //n: 43261596->21630798->10815399->5407699->2703849->1351924->675962->337981->168990->84495->42247->21123->10561->5280->2640->1320->660->330->165->82->41->20->10->5->2->1
//            n = n >>> 1;
//            //n: 21630798->10815399->5407699->2703849->1351924->675962->337981->168990->84495->42247->21123->10561->5280->2640->1320->660->330->165->82->41->20->10->5->2->1->0
//        }
//
//        return rev;
//    }

    //官方题解
//    public static int reverseBits(int n) {
//        int rev = 0;
//        for (int i = 0; i < 32 && n != 0; ++i) {
//            rev |= (n & 1) << (31 - i);
//            n >>>= 1;
//        }
//        return rev;
//    }
}

//先了解一下位运算的知识：
//
//与&：0&0=0 0&1=0 1&0=0 1&1=1
//
//或|：0|0=0 0|1=1 1|0=1 1|1=1
//
//异或^：0^0=0 0^1=1 1^0=1 1^1=0
//
//取反~：~1=0 ~0=1
//
//左移<<：左边的二进制位丢弃，右边补0
//
//右移>>：正数左补0，负数左补1，右边丢弃
//
//无符号左移<<<：左边的二进制位丢弃，右边补0
//
//无符号右移>>>：忽略符号位，空位都以0补齐